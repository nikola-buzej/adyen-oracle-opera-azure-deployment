targetScope = 'resourceGroup'

//Parameters

@description('The location where the resources will be created.')
param location string = resourceGroup().location

@description('Optional. The tags to be assigned to the created resources.')
param tags object = {}

@description('Optional. The name of the container apps environment. If set, it overrides the name generated by the template.')
param containerAppsEnvironmentName string = 'container-apps-env-test'

@description('Optional. The name of the log analytics workspace. If set, it overrides the name generated by the template.')
param logAnalyticsWorkspaceName string = 'log-analytics-workspace-test'

@description('Optional. The name of the application insights. If set, it overrides the name generated by the template.')
param applicationInsightName string = 'application-insight-name'

@secure()
@description('Admin password for db')
param adminPassword string

@description('The docker image')
param backendApiServiceImage string


//Resources

module containerAppsEnv 'container-apps-environment.bicep' = {
  name: 'containerAppsEnv-Test'
  params: {
    containerAppsEvnironmentName: containerAppsEnvironmentName
    logAnalyticsWorkspaceName: logAnalyticsWorkspaceName
    location: location
    tags: tags
    applicationInsightName: applicationInsightName
  }
}

module db 'postgre-db.bicep' = {
  name: 'postgres-cosmos-test'
  params: {
    administratorLoginPassword: adminPassword
    clusterName: 'test-cluster'
    location: location
  }
}

module services 'container-apps.bicep' = {
  name: 'container-apps-test'
  params: {
    backendApiServiceImage: backendApiServiceImage
    location: location
    tags: tags
    dbName: db.outputs.dbServerId
    containerAppsEnvironmentName: containerAppsEnvironmentName
  }
  dependsOn: [containerAppsEnv, db]
}
